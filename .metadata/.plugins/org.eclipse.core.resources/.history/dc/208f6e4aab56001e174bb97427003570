package dataStructure;

import java.util.List;
import java.util.LinkedList;
import java.util.Queue;

public class NArrayTree 
{
  public static class NAryTree
  {
      int data;
      List<NAryTree> children = new LinkedList<>();

      NAryTree(int data){
          this.data = data;
      }

      NAryTree(int data,List<NAryTree> child){
          this.data = data;
          children = child;
      }
  }

  private static void printNAryTree(NAryTree root){
      if(root == null) return;
      Queue<NAryTree> queue = new LinkedList<>();
      queue.offer(root);
      while(!queue.isEmpty()) {
          int len = queue.size();
          for(int i=0;i<len;i++) {
              NAryTree node = queue.poll();
              assert node != null;
              System.out.print(node.data + " ");
              for (NAryTree item : node.children) {
                  queue.offer(item);
              }
          }
          System.out.println();
      }
  }

  public static void main(String[] args) {
      NAryTree root = new NAryTree(10);   //root; level 0

      root.children.add(new NAryTree(20));    //1st child node of root
      root.children.add(new NAryTree(30));    //2nd child node of root
      root.children.add(new NAryTree(40));    //3rd child node of root

      root.children.get(0).children.add(new NAryTree(50));    //1st child of 1st child node
      root.children.get(0).children.add(new NAryTree(60));    //2nd child of 1st child node
      root.children.get(0).children.add(new NAryTree(70));    //3rd child of 1st child node

      root.children.get(1).children.add(new NAryTree(80));    //1st child of 2nd child node
      root.children.get(1).children.add(new NAryTree(90));    //2nd child of 2nd child node
      root.children.get(1).children.add(new NAryTree(100));   //3rd child of 2nd child node

      root.children.get(2).children.add(new NAryTree(110));   //1st child of 2nd child node
      root.children.get(2).children.add(new NAryTree(120));   //2nd child of 2nd child node
      root.children.get(2).children.add(new NAryTree(130));   //3rd child of 2nd child node

      printNAryTree(root);
  }
}