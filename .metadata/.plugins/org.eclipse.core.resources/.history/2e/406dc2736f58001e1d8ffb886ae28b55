package sortingAlgorithm;

public class QuickSorting {
//	public static int partitionArray(int arr[], int left, int right)
//	{
//		int pivot = arr[right];
//		int i = (left - 1);
//		
//		for(int j = left ; j<=right; j++)
//		{
//			if(arr[j]<pivot)
//			{
//				i++;
//				Main.swap(arr, i, j);
//			}
//		}
//		Main.swap(arr, i+1, right);
//		return (i+1);
//	}
//	public void quickSort(int arr[], int left, int right)
//	{
//		if(left<right)
//		{
//			int pivot = partitionArray(arr, left, right);
//			
//			quickSort(arr, left, pivot-1);
//			quickSort(arr, pivot+1, right);
//		}
//	}
	public static int partition(int arr[], int left, int right, int pivot) 
	{
		   int leftPointer = left -1;
		   int rightPointer = right;

		   while(true) {
		      while(arr[++leftPointer] < pivot) 
		      {
		         //do nothing
		      }
				
		      while(rightPointer > 0 && arr[--rightPointer] > pivot) 
		      {
		         //do nothing
		      }

		      if(leftPointer >= rightPointer) {
		         break;
		      } 
		      else 
		      {
		    	 System.out.println(" pivot swapped "+ arr[leftPointer] +" "+arr[rightPointer]);
		         Main.swap(arr,leftPointer,rightPointer);
		         Main.print(arr, arr.length);
		      }
		   }
			
		   System.out.println(" pivot swapped "+ arr[leftPointer] +" "+arr[right]);
		   Main.swap(arr,leftPointer,right);
		   System.out.println("Updated Array: "); 
		   Main.print(arr, arr.length);
		   return leftPointer;
		}

		void quickSort(int arr[],int left, int right) {
		   if(left<right){
		      int pivot = arr[right];
		      int partitionPoint = partition(arr,left, right, pivot);
		      quickSort(arr,left,partitionPoint-1);
		      quickSort(arr,partitionPoint+1,right);
		   }        
		}
	
}
