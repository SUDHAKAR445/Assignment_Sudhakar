package dataStructure;
import java.util.*;
public class LinkedListImplementation 
{
	Node head = null;
	static class Node
	{
		int data;
		Node next;
		
		
		public Node(int data)
		{
			this.data = data;
			this.next = null;
		}
	}
	
	public static LinkedListImplementation insert(LinkedListImplementation list , int data)
	{
		Node new_node = new Node(data);
		if(list.head == null)
		{
			list.head = new_node;
		}
		else
		{
			Node last = list.head;
			while(last.next != null)
			{
				last = last.next;
			}
			last.next = new_node;
		}
		return list;
	}
	
	public static LinkedListImplementation insertBegin(LinkedListImplementation list , int data)
	{
		Node new_node = new Node(data);
		new_node.next = list.head;
		list.head = new_node;
		return list;
	}
	public static LinkedListImplementation insertEnd(LinkedListImplementation list , int data)
	{
		Node new_node = new Node(data);
		Node last = list.head;
		while(last.next != null)
		{
			last = last.next;
		}
		last.next = new_node;
		return list;
	}
	public static void printList(LinkedListImplementation list)
	{
		Node current = list.head;
		System.out.println("Linked List elements are : ");
		
		while(current != null)
		{
			System.out.println(current.data + " ");
			current = current.next;
		}
	}
	public static LinkedListImplementation deleteBegin(LinkedListImplementation list)
	{
		if(list.head == null)
		{
			System.out.println("Nothing to be deleted because list is empty");
		}
		else
		{
			Node temp = list.head;
			list.head = temp.next;
		}
		return list;
	}
	
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		LinkedListImplementation list = new LinkedListImplementation();
		System.out.println("Enter the size of the linked list : ");
		int n = sc.nextInt();
		System.out.println("Enter linked list values :");
		for(int i=0;i<n;i++)
		{
			int a = sc.nextInt();
			list= insert(list, a);
		}
		insertBegin(list, 10);
		insertEnd(list, 100);
		printList(list);
	}
}
