package graphImplementation;

import java.util.*;

class Graph
{
	private int vertices;
	private Map<Integer, List<Integer>> adjacentList;
	
	public Graph( int vertices)
	{
		this.vertices = vertices;
		
		adjacentList = new HashMap<>();
		
	}
	void insertVertices(int v)
	{
		adjacentList.put(v, new LinkedList<>());
	}
	public void addEdge( int source, int distination)
	{
		adjacentList.get(source).add(distination);
	}
	public void printGraph() {
        for (Map.Entry<Integer, List<Integer>> entry : adjacentList.entrySet()) {
            System.out.print(entry.getKey() + " -> ");
            for (Integer vertex : entry.getValue()) {
                System.out.print(vertex + " ");
            }
            System.out.println();
        }
	}
}
public class GraphImplementation 
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the total number of vertices in the graph : ");
		int vertices = sc.nextInt();
		
		Graph g = new Graph(vertices);
		
		System.out.println("Enter the vertices present in the graph : ");
		for(int i=0;i<vertices;i++)
		{
			int v = sc.nextInt();
			g.insertVertices(v);
		}
		System.out.println("Enter the soucre and distination of graph vertices : ");
		while(true)
		{
			System.out.print("Enter the source : ");
			int source = sc.nextInt();
			if(source == -1)
			{
				break;
			}
			System.out.print("\nEnter the distination : ");
			int distination = sc.nextInt();
			g.addEdge(source, distination);
		}
		g.printGraph();
	}
}
