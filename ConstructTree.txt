/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int index = 0;

    public TreeNode build(int[] preorder, HashMap<Integer,Integer>mapInorder,int inOrderStart, int inOrderEnd )
    {
        if(inOrderStart > inOrderEnd)
        {
            return null;
        }
        int currentVal = preorder[index++];

        TreeNode currentNode = new TreeNode(currentVal);

        int i = mapInorder.get(currentVal);

        currentNode.left = build(preorder, mapInorder, inOrderStart, i-1);
        currentNode.right = build(preorder, mapInorder, i+1, inOrderEnd);
        return currentNode;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) 
    {
        HashMap<Integer,Integer> mapInorder = new HashMap<>();

        for(int i=0; i<inorder.length;i++)
        {
            mapInorder.put(inorder[i],i);
        }
        return build( preorder, mapInorder, 0, inorder.length-1);
    }
}